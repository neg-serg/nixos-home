#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'USAGE'
Usage: kitty-panel [options] [CITY]

Launch the Kitty dashboard panel layout with system metrics, visualizer, clock, and weather.

Options:
  --city NAME              City name for weather (fallback: KITTY_PANEL_CITY)
  --font-size SIZE         Font size to apply before launching (use 'keep' to skip)
  --image PATH             Image path for icat overlay (fallback: KITTY_PANEL_IMAGE)
  --wifi-iface IFACE       Wi-Fi interface for SSID lookup (fallback: KITTY_PANEL_WIFI_IFACE)
  --refresh SECONDS        Metrics refresh interval (default 5)
  --weather-refresh SECONDS  Weather refresh interval (default 14400)
  --help                   Show this help text

Environment:
  KITTY_PANEL_CITY, KITTY_PANEL_FONT_SIZE, KITTY_PANEL_IMAGE,
  KITTY_PANEL_WIFI_IFACE, KITTY_PANEL_REFRESH, KITTY_PANEL_WEATHER_REFRESH,
  KITTY_PANEL_IMAGE_PLACE, KITTY_PANEL_IMAGE_ALIGN, KITTY_PANEL_IMAGE_SCALE_UP
USAGE
}

font_size="${KITTY_PANEL_FONT_SIZE:-12}"
city="${KITTY_PANEL_CITY:-}"
image_path_raw="${KITTY_PANEL_IMAGE:-}"
wifi_iface="${KITTY_PANEL_WIFI_IFACE:-}"
metrics_refresh="${KITTY_PANEL_REFRESH:-5}"
weather_refresh="${KITTY_PANEL_WEATHER_REFRESH:-14400}"
image_place="${KITTY_PANEL_IMAGE_PLACE:-20x20@1x1}"
image_align="${KITTY_PANEL_IMAGE_ALIGN:-center}"
image_scale_up="${KITTY_PANEL_IMAGE_SCALE_UP:-no}"
sysinfo_script=""
weather_script=""
image_displayed=""
declare -a opened_windows=()

parse_args() {
  while (($#)); do
    case "$1" in
      --city)
        shift
        city="${1:-}"
        [[ -z "$city" ]] && { echo "kitty-panel: missing value for --city" >&2; exit 1; }
        ;;
      --font|--font-size)
        shift
        font_size="${1:-}"
        [[ -z "$font_size" ]] && { echo "kitty-panel: missing value for --font-size" >&2; exit 1; }
        ;;
      --image)
        shift
        image_path_raw="${1:-}"
        [[ -z "$image_path_raw" ]] && { echo "kitty-panel: missing value for --image" >&2; exit 1; }
        ;;
      --wifi-iface)
        shift
        wifi_iface="${1:-}"
        [[ -z "$wifi_iface" ]] && { echo "kitty-panel: missing value for --wifi-iface" >&2; exit 1; }
        ;;
      --refresh)
        shift
        metrics_refresh="${1:-}"
        [[ -z "$metrics_refresh" ]] && { echo "kitty-panel: missing value for --refresh" >&2; exit 1; }
        ;;
      --weather-refresh)
        shift
        weather_refresh="${1:-}"
        [[ -z "$weather_refresh" ]] && { echo "kitty-panel: missing value for --weather-refresh" >&2; exit 1; }
        ;;
      --help|-h)
        usage
        exit 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        echo "kitty-panel: unknown option '$1'" >&2
        usage
        exit 1
        ;;
      *)
        if [[ -z "$city" ]]; then
          city="$1"
        else
          echo "kitty-panel: unexpected positional argument '$1'" >&2
          usage
          exit 1
        fi
        ;;
    esac
    shift
  done

  if (($#)); then
    echo "kitty-panel: unexpected trailing arguments: $*" >&2
    usage
    exit 1
  fi
}

validate_numbers() {
  if [[ "$font_size" != "keep" ]] && ! [[ "$font_size" =~ ^[0-9]+$ ]]; then
    echo "kitty-panel: font size must be an integer or 'keep'" >&2
    exit 1
  fi
  for pair in "metrics_refresh:$metrics_refresh" "weather_refresh:$weather_refresh"; do
    local name value
    IFS=':' read -r name value <<<"$pair"
    if ! [[ "$value" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      echo "kitty-panel: $name must be numeric" >&2
      exit 1
    fi
  done
}

require_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    echo "kitty-panel: required command '$1' not found" >&2
    exit 1
  fi
}

ensure_remote_control() {
  if ! kitty @ ls >/dev/null 2>&1; then
    echo "kitty-panel: kitty remote control unavailable. Run inside kitty or set KITTY_LISTEN_ON." >&2
    exit 1
  fi
}

write_sysinfo_script() {
  sysinfo_script=$(mktemp -t kitty-panel-sysinfo.XXXXXX)
  cat <<'SYSINFO' >"$sysinfo_script"
#!/usr/bin/env bash
set -euo pipefail

refresh="${KITTY_PANEL_REFRESH:-5}"

have() { command -v "$1" >/dev/null 2>&1; }

read_packages() {
  if have nix; then
    local count
    count=$(nix profile list 2>/dev/null | tail -n +2 | wc -l | tr -d ' ')
    if [[ -n "$count" ]]; then
      echo "$count"
      return
    fi
  fi
  if have yay; then
    yay -Q | wc -l | tr -d ' '
    return
  fi
  if have pacman; then
    pacman -Q | wc -l | tr -d ' '
    return
  fi
  echo "N/A"
}

read_volume() {
  if have wpctl; then
    local output level muted
    output=$(wpctl get-volume @DEFAULT_AUDIO_SINK@ 2>/dev/null || true)
    level=$(sed -n 's/.*Volume:[[:space:]]*\([0-9.]*\).*/\1/p' <<<"$output")
    muted=$(grep -q '\[MUTED\]' <<<"$output" && echo ' (muted)' || true)
    if [[ -n "$level" ]]; then
      awk -v lvl="$level" -v muted="$muted" 'BEGIN { printf "%.0f%%%s", lvl * 100, muted }'
      return
    fi
  fi
  if have pactl; then
    local line
    line=$(pactl get-sink-volume @DEFAULT_SINK@ 2>/dev/null | head -n1 || true)
    if [[ -n "$line" ]]; then
      local vol mute
      vol=$(grep -o '[0-9]\+%' <<<"$line" | head -n1)
      mute=$(pactl get-sink-mute @DEFAULT_SINK@ 2>/dev/null | awk '/yes/ {print " (muted)"}')
      [[ -n "$vol" ]] && printf '%s%s' "$vol" "$mute" && return
    fi
  fi
  echo "N/A"
}

read_brightness() {
  if have brightnessctl; then
    local cur max
    cur=$(brightnessctl g 2>/dev/null || true)
    max=$(brightnessctl m 2>/dev/null || true)
    if [[ "$cur" =~ ^[0-9]+$ ]] && [[ "$max" =~ ^[0-9]+$ ]] && (( max > 0 )); then
      printf '%s%%' $(( cur * 100 / max ))
      return
    fi
  fi
  echo "N/A"
}

read_network() {
  local iface="${KITTY_PANEL_WIFI_IFACE:-}"
  local ssid
  if have iwgetid; then
    if [[ -n "$iface" ]]; then
      ssid=$(iwgetid -r "$iface" 2>/dev/null || true)
    else
      ssid=$(iwgetid -r 2>/dev/null || true)
    fi
    if [[ -n "$ssid" ]]; then
      echo "$ssid"
      return
    fi
  fi
  if have nmcli; then
    ssid=$(nmcli -t -f active,ssid connection show --active 2>/dev/null | awk -F: '$1 == "yes" {print $2; exit}')
    if [[ -n "$ssid" ]]; then
      echo "$ssid"
      return
    fi
  fi
  if have iwconfig && [[ -n "$iface" ]]; then
    ssid=$(iwconfig "$iface" 2>/dev/null | sed -n 's/.*ESSID:"\(.*\)".*/\1/p')
    if [[ -n "$ssid" ]] && [[ "$ssid" != "off/any" ]]; then
      echo "$ssid"
      return
    fi
  fi
  echo "offline"
}

read_color() {
  local key="$1" default="$2" value
  value=$(kitty @ get-colors 2>/dev/null | awk -v k="$key" '$1 == k {print $2}' | tail -n1)
  if [[ "$value" =~ ^#[0-9a-fA-F]{6}$ ]]; then
    echo "$value"
  else
    echo "$default"
  fi
}

prev_packages=""
prev_volume=""
prev_brightness=""
prev_network=""
prev_c0=""
prev_c2=""

while true; do
  packages=$(read_packages)
  volume=$(read_volume)
  brightness=$(read_brightness)
  network=$(read_network)
  color0=$(read_color color0 '#555555')
  color2=$(read_color color2 '#5fb0f6')

  if [[ "$packages$volume$brightness$network$color0$color2" != "$prev_packages$prev_volume$prev_brightness$prev_network$prev_c0$prev_c2" ]]; then
    prev_packages="$packages"
    prev_volume="$volume"
    prev_brightness="$brightness"
    prev_network="$network"
    prev_c0="$color0"
    prev_c2="$color2"

    packages_box=$(gum style --border=rounded --border-foreground="$color2" --padding "0 1" "Packages: $packages")
    volume_box=$(gum style --border=rounded --border-foreground="$color2" --padding "0 1" "Volume: $volume")
    brightness_box=$(gum style --border=rounded --border-foreground="$color2" --padding "0 1" "Brightness: $brightness")
    network_box=$(gum style --border=rounded --border-foreground="$color2" --padding "0 1" "Wi-Fi: $network")
    calendar=$(LC_ALL=C cal --color=always | sed -n '1,7p' | gum style --border=rounded --padding "0 2" --border-foreground="$color0" --margin "0 0")
    vol_and_net=$(gum join "$volume_box" "$network_box")
    sys_info=$(gum join --vertical --align=right "$packages_box" "$brightness_box" "$vol_and_net")

    printf '\033c'
    gum join "$sys_info" "$calendar"
  fi

  sleep "$refresh"
done
SYSINFO
  chmod +x "$sysinfo_script"
}

write_weather_script() {
  weather_script=$(mktemp -t kitty-panel-weather.XXXXXX)
  cat <<'WEATHER' >"$weather_script"
#!/usr/bin/env bash
set -euo pipefail

refresh="${KITTY_PANEL_WEATHER_REFRESH:-14400}"
city="${KITTY_PANEL_CITY:-}"

while true; do
  printf '\033c'
  if [[ -z "$city" ]]; then
    printf 'Set KITTY_PANEL_CITY or pass --city to show the weather.\n'
  else
    if data=$(curl -fsS "https://wttr.in/${city}" 2>/dev/null); then
      printf '%s\n' "$(sed -n '1,7p' <<<"$data")"
    else
      printf 'wttr.in is currently unreachable.\n'
    fi
  fi
  sleep "$refresh"
done
WEATHER
  chmod +x "$weather_script"
}

launch_window() {
  local id
  if ! id=$(kitty @ launch "$@" 2>/dev/null); then
    echo "kitty-panel: failed to launch window: $*" >&2
    exit 1
  fi
  id="${id//$'\r'/}"
  id="${id//$'\n'/}"
  opened_windows+=("$id")
  printf '%s' "$id"
}

resize_window() {
  local id="$1" axis="$2" increment="$3"
  kitty @ resize-window --match id:"$id" --axis "$axis" --increment "$increment" >/dev/null 2>&1 || true
}

send_keys() {
  local id="$1"; shift
  kitty @ send-key --match id:"$id" "$@" >/dev/null 2>&1 || true
}

cleanup() {
  if [[ -n "$image_displayed" ]]; then
    kitty +kitten icat --clear >/dev/null 2>&1 || true
  fi
  for id in "${opened_windows[@]}"; do
    kitty @ close-window --match id:"$id" >/dev/null 2>&1 || true
  done
  rm -f "$sysinfo_script" "$weather_script"
}

main() {
  parse_args "$@"
  validate_numbers
  require_cmd kitty
  require_cmd gum
  require_cmd btop
  require_cmd cava
  require_cmd peaclock
  if [[ -n "${city}" ]]; then
    require_cmd curl
  fi
  ensure_remote_control

  opened_windows=()
  sysinfo_script=""
  weather_script=""
  image_displayed=""

  trap cleanup EXIT

  write_sysinfo_script
  write_weather_script

  local driver_window="${KITTY_WINDOW_ID:-}"
  local btop_main="" btop_proc="" cava_window="" sysinfo_window="" peaclock_window="" weather_window=""
  if [[ "$font_size" != "keep" ]]; then
    kitty @ set-font-size "$font_size" >/dev/null 2>&1 || true
  fi

  btop_main=$(launch_window --type=window --location=hsplit btop -p 1)
  sleep 0.05
  resize_window "$btop_main" vertical 14

  btop_proc=$(launch_window --type=window --location=vsplit btop -p 2)
  sleep 0.05
  send_keys "$btop_proc" 5

  cava_window=$(launch_window --type=window --location=hsplit cava)
  sleep 0.05
  resize_window "$cava_window" vertical -15

  sysinfo_window=$(launch_window \
    --type=window \
    --location=vsplit \
    --env "KITTY_PANEL_REFRESH=$metrics_refresh" \
    --env "KITTY_PANEL_WIFI_IFACE=$wifi_iface" \
    "$sysinfo_script")
  sleep 0.05
  resize_window "$sysinfo_window" horizontal -29

  peaclock_window=$(launch_window --type=window --location=vsplit peaclock)
  sleep 0.05
  resize_window "$peaclock_window" horizontal 15
  send_keys "$peaclock_window" s
  sleep 0.5
  send_keys "$peaclock_window" d
  resize_window "$peaclock_window" horizontal 6

  weather_window=$(launch_window \
    --type=window \
    --location=vsplit \
    --env "KITTY_PANEL_CITY=$city" \
    --env "KITTY_PANEL_WEATHER_REFRESH=$weather_refresh" \
    "$weather_script")
  sleep 0.05
  resize_window "$weather_window" horizontal -18

  if [[ -n "$driver_window" ]]; then
    kitty @ focus-window --match id:"$driver_window" >/dev/null 2>&1 || true
  fi

  if [[ -n "$image_path_raw" ]]; then
    local img_path="${image_path_raw/#\~/$HOME}"
    if [[ -f "$img_path" ]]; then
      kitty +kitten icat --align "$image_align" --place "$image_place" --scale-up "$image_scale_up" "$img_path" >/dev/null 2>&1 && image_displayed=1
    else
      echo "kitty-panel: image '$image_path_raw' not found" >&2
    fi
  fi

  printf 'kitty-panel ready. Press Enter to close the dashboard...\n'
  read -r _
}

main "$@"
