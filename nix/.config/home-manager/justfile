fmt:
    nix fmt

check:
    nix flake check -L

lint:
    set -eu
    statix check -- .
    deadnix --fail .
    # Guard: discourage `with pkgs; [ ... ]` lists (prefer explicit pkgs.*)
    if grep -R -nE --include='*.nix' --exclude='flake/checks.nix' --exclude='checks.nix' 'with[[:space:]]+pkgs;[[:space:]]*\[' . | grep -q .; then \
      echo 'Found discouraged pattern: use explicit pkgs.* items instead of `with pkgs; [...]`' >&2; \
      grep -R -nE --include='*.nix' --exclude='flake/checks.nix' --exclude='checks.nix' 'with[[:space:]]+pkgs;[[:space:]]*\[' . || true; \
      exit 1; \
    fi; \
    if grep -R -nE --include='*.nix' --exclude='flake/checks.nix' --exclude='checks.nix' 'targetPkgs[[:space:]]*=[[:space:]]*pkgs:[[:space:]]*with[[:space:]]+pkgs' . | grep -q .; then \
      echo 'Found discouraged pattern in FHS targetPkgs: avoid `with pkgs`' >&2; \
      grep -R -nE --include='*.nix' --exclude='flake/checks.nix' --exclude='checks.nix' 'targetPkgs[[:space:]]*=[[:space:]]*pkgs:[[:space:]]*with[[:space:]]+pkgs' . || true; \
      exit 1; \
    fi
    if git ls-files -- '*.py' >/dev/null 2>&1; then \
      ruff check -- .; \
      black --check --line-length 100 --extend-exclude '(secrets/crypted|modules/user/gui/kitty/conf/tab_bar.py)' .; \
    fi
    files=$(git ls-files '*.sh' '*.bash' | \
      grep -v '^modules/misc/fun-art/' | \
      grep -v '^nix/.config/home-manager/modules/misc/fun-art/' || true); \
    if [ -n "$files" ]; then \
      shellcheck -S style -x $files; \
    fi

hm-neg:
    home-manager switch --flake .#neg

hm-lite:
    home-manager switch --flake .#neg-lite

hm-dev-speed:
    # Enable dev-speed mode (env + feature defaults) and switch full profile
    HM_DEV_SPEED=1 home-manager switch --flake .#neg

hm-lite-speed:
    # Enable dev-speed mode (env + feature defaults) and switch lite profile
    HM_DEV_SPEED=1 home-manager switch --flake .#neg-lite

hm-build:
    # Build activation package without switching
    home-manager build --flake .#neg

docs:
    # Generate docs packages (OPTIONS.md, features-options.{md,json})
    HM_DOCS=1 nix build --no-link -L .#docs.${SYSTEM:-x86_64-linux}.options-md

hooks-enable:
    git config core.hooksPath .githooks

show-features:
    # Print flattened features for given check names (or default matrix)
    # Compatible with older `just` (no recipe args). Pass items via env var:
    #   NAMES="hm-eval-neg-retro-on hm-eval-neg-retro-off" just show-features
    # Or rely on defaults:
    #   just show-features
    # Filter only true values:
    #   ONLY_TRUE=1 just show-features
    set -eu
    sys=${SYSTEM:-x86_64-linux}
    if [ -n "${NAMES:-}" ]; then \
    items=(${NAMES}); \
    else \
    items=( \
      hm-eval-neg-retro-on \
      hm-eval-neg-retro-off \
      hm-eval-lite-retro-on \
      hm-eval-lite-retro-off \
      hm-eval-neg-nogui-retro-on \
      hm-eval-neg-nogui-retro-off \
      hm-eval-lite-nogui-retro-on \
      hm-eval-lite-nogui-retro-off \
      hm-eval-neg-noweb-retro-on \
      hm-eval-neg-noweb-retro-off \
      hm-eval-lite-noweb-retro-on \
      hm-eval-lite-noweb-retro-off \
    ); \
    fi
    for name in "${items[@]}"; do \
      echo "== ${name} (system=${sys}) =="; \
      out=$(nix build --no-link --print-out-paths ".#checks.${sys}.${name}"); \
      if command -v jq >/dev/null 2>&1; then \
        if [ "${ONLY_TRUE:-}" = "1" ]; then \
          jq -r 'to_entries|map(select(.value==true).key)|.[]' <"$out"; \
        else \
          jq . <"$out"; \
        fi; \
      else \
        cat "$out"; \
      fi; \
      echo; \
    done

hm-status:
    set -eu
    echo "== systemd --user failed units =="
    systemctl --user --failed || true
    echo
    echo "== recent user journal =="
    journalctl --user -b -n 120 --no-pager || true

clean-caches:
    set -eu
    repo=$(git rev-parse --show-toplevel)
    find "$repo" -type f -name '*.zwc' -delete || true
    find "$repo" -type d -name '__pycache__' -prune -exec rm -rf {} + || true
    find "$repo" -type f -name '*.pyc' -delete || true
    rm -rf "$repo/nix/.config/home-manager/.cache" || true
    : "${XDG_CACHE_HOME:=$HOME/.cache}"
    : "${XDG_STATE_HOME:=$HOME/.local/state}"
    rm -rf "$XDG_CACHE_HOME/zsh" || true
    rm -rf "$XDG_CACHE_HOME/nu" "$XDG_CACHE_HOME/nushell" || true
    rm -f "$XDG_STATE_HOME/nushell/history.sqlite3"* || true
hm-bench:
    # Fast eval stats for baseline + no-GUI + no-Web matrices
    set -eu
    sys=${SYSTEM:-x86_64-linux}
    if [ -n "${NAMES:-}" ]; then \
      items=(${NAMES}); \
    else \
      items=( \
        hm-eval-neg-retro-off \
        hm-eval-lite-retro-off \
        hm-eval-neg-nogui-retro-off \
        hm-eval-lite-nogui-retro-off \
        hm-eval-neg-noweb-retro-off \
        hm-eval-lite-noweb-retro-off \
      ); \
    fi
    for name in "${items[@]}"; do \
      echo "== ${name} (system=${sys}) =="; \
      NIX_SHOW_STATS=1 nix build --no-link ".#checks.${sys}.${name}" -L || true; \
      echo; \
    done

hm-bench-fast:
    # Fast eval stats only for no-GUI/no-Web matrices
    set -eu
    sys=${SYSTEM:-x86_64-linux}
    items=( \
      hm-eval-neg-nogui-retro-off \
      hm-eval-lite-nogui-retro-off \
      hm-eval-neg-noweb-retro-off \
      hm-eval-lite-noweb-retro-off \
    )
    for name in "${items[@]}"; do \
      echo "== ${name} (system=${sys}) =="; \
      NIX_SHOW_STATS=1 nix build --no-link ".#checks.${sys}.${name}" -L || true; \
      echo; \
    done
