#compdef zoxide-complete

# ------------------------------------------------------------------------------
# _zoxide_zsh_word_complete
#
# Completion backend for the Ctrl-Y zoxide binding.
#
# This function consults zoxide's database via `zoxide query -l` and returns a
# list of candidate directories for completion. The current word under the
# cursor is split into space-separated keywords and passed directly to
# `zoxide query`. If there is exactly one result, it is inserted immediately
# rather than presenting a menu. If there are multiple results, a menu is
# triggered via compstate so that the user can choose between the matches.
#
# By default compadd will perform prefix matching on the candidates. The `-Q`
# flag disables special character interpretation so that paths containing
# spaces or punctuation are presented literally. We also use `--` to
# explicitly terminate options passed to compadd.
#
# This file is autoloaded by the 04-bindings.zsh script.

function _zoxide_zsh_word_complete() {
  # Guard against calling this function when zoxide is unavailable.
  [[ $+commands[zoxide] -eq 0 ]] && return 1

  # Determine the word under the cursor. In a completion context Zsh exposes
  # the current command line in the `words` array and the index of the word
  # being completed in the `CURRENT` variable. We fall back to using
  # $BUFFER/$CURSOR for safety.
  local query_str
  if (( CURRENT > 0 )); then
    query_str="${words[CURRENT]}"
  else
    query_str=${BUFFER:0:$CURSOR}
  fi

  # Split the query on spaces to allow multiple keywords. If the user has
  # typed nothing yet, pass no arguments to zoxide which will produce the
  # top-ranked directory.
  local -a query_args=()
  if [[ -n $query_str ]]; then
    query_args=(${(Q)${(s: :)query_str}})
  fi

  # Obtain candidate directories from zoxide. We request all matches with
  # `--list` so that frecency ordering is preserved.
  local IFS=$'\n'
  local -a results
  results=(${(f)"$(zoxide query -l -- ${query_args[@]:-})"})

  # If there are no results we decline to handle the completion so that
  # subsequent completers may run.
  (( $#results )) || return 1

  # Add the completions. Use -Q to ensure literal insertion of paths and --
  # to terminate the option list.
  compadd -Q -- ${results[@]}

  # Insertion behaviour: insert single result immediately; otherwise show menu.
  if (( $#results == 1 )); then
    compstate[insert]=1
  else
    compstate[insert]=menu
  fi
  return
}
